upstream ssl.example.com {
    # server unix:/dev/shm/sock/app.sock fail_timeout=0;
    server host.docker.internal:8000 fail_timeout=0;
}

# HTTP redirect
server {
    listen 80;
    listen [::]:80;

    server_name ssl.example.com;

    return 301 https://$server_name$request_uri;
    # location / {
    #     return 301 https://$server_name$request_uri;
    # }
}

server {
    listen                  443 ssl;
    listen                  [::]:443 ssl;
    http2 on;

    server_name             ssl.example.com;

    set                     $base /srv/www/ssl.example.com;
    root                    $base/public;

    access_log              /var/log/nginx/ssl.example.com-access.log main;
    error_log               /var/log/nginx/ssl.example.com-error.log warn;

    # SSL 相关配置
    ssl_certificate         /acme.sh/ssl.example.com_ecc/fullchain.cer;
    ssl_certificate_key     /acme.sh/ssl.example.com_ecc/ssl.example.com.key;
    # OCSP Stapling 相关
    ssl_trusted_certificate /acme.sh/ssl.example.com_ecc/fullchain.cer;

    include                 include/ssl/engine.conf;
    include                 include/ssl/ocsp_stapling.conf;
    include                 include/ssl/policy_intermediate.conf;

    # allow large uploads of files
    # client_max_body_size 50M;

    location / {
        try_files $uri @proxy_ssl.example.com;
    }

    location @proxy_ssl.example.com {
        proxy_pass http://ssl.example.com;

        # 反向代理相关 header
        include    include/host/proxy.conf;
    }

    # 敏感文件保护
    include        include/host/security_file_access.conf;
}
